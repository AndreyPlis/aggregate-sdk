import JObject from '../util/java/JObject';
import Expression from './Expression';
import ContextManager from '../context/ContextManager';
import Context from '../context/Context';
import DataTable from '../datatable/DataTable';
import CallerController from '../context/CallerController';
import ReferenceResolver from './ReferenceResolver';
import EnvironmentReferenceResolver from './EnvironmentReferenceResolver';
import EvaluationEnvironment from './EvaluationEnvironment';
import AttributedObject from './AttributedObject';
import Function from './function/Function';
import Tracer from './util/Tracer';
import ErrorCollector from '../util/ErrorCollector';
export default class Evaluator extends JObject {
    private static readonly ENVIRONMENT_PREVIOUS;
    private static readonly ENVIRONMENT_COUNT;
    private readonly resolvers;
    private keepPreviousResult;
    private readonly customFunctions;
    private tracer;
    private previousResult;
    private count;
    private readonly environmentResolver;
    constructor(cm?: ContextManager<any> | null, defaultContext?: Context<any, any> | null, defaultTable?: DataTable | null, caller?: CallerController);
    init(defaultResolver: ReferenceResolver): void;
    evaluate(expression: Expression | null, environment?: EvaluationEnvironment, attributed?: boolean): Promise<any> | any;
    evaluateAttributed(expression: Expression, environment?: EvaluationEnvironment): Promise<AttributedObject> | AttributedObject;
    evaluateToString(expression: Expression | null): Promise<string> | string;
    evaluateToBooleanOrNull(expression: Expression): Promise<boolean | null> | boolean | null;
    evaluateToBoolean(expression: Expression): Promise<boolean> | boolean;
    evaluateToDataTable(expression: Expression): Promise<DataTable> | DataTable;
    private wrapAttributedObject;
    private setKeepPreviousResult;
    private getKeepPreviousResult;
    private getCount;
    getPreviousResult(): any;
    restorePreviousResult(previousResult: any): void;
    setResolver(schema: string, resolver: ReferenceResolver | null): void;
    getEnvironmentResolver(): EnvironmentReferenceResolver;
    setDefaultTable(data: DataTable | null): void;
    setDefaultContext(aContext: Context<any, any>): void;
    getDefaultResolver(): ReferenceResolver;
    getResolvers(): Map<string | null, ReferenceResolver | null>;
    getCustomFunction(functionName: string): Function | undefined;
    getTracer(): Tracer | null;
    setTracer(tracer: Tracer | null): void;
    setPreviousResult(previousResult: any): void;
    registerCustomFunction(name: string, impl: Function): void;
    static processBindings(table: DataTable, evaluator: Evaluator, errorCollector?: ErrorCollector | null, split?: boolean): DataTable;
    getResolver(schema: string | null): ReferenceResolver | null;
}
