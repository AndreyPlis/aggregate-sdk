import { ParserRuleContext } from 'antlr4';
import AttributedObject from './AttributedObject';
import Evaluator from './Evaluator';
import Function from './functions/Function';
import EvaluationEnvironment from './EvaluationEnvironment';
import ExpressionVisitorFacade from './ExpressionVisitorFacade';
export default abstract class AbstractEvaluatingVisitor extends ExpressionVisitorFacade {
    static DEFAULT_FUNCTIONS: Map<string, Function>;
    private static __static_init;
    static _static_init(): void;
    private static registerDefaultFunction;
    protected readonly evaluator: Evaluator;
    protected readonly environment: EvaluationEnvironment;
    constructor(evaluator: Evaluator, environment: EvaluationEnvironment);
    visitCompilationUnit(ctx: ParserRuleContext): AttributedObject | null;
    visitLogicalAndNode(ctx: ParserRuleContext): AttributedObject;
    visitBitwiseOrNode(ctx: ParserRuleContext): AttributedObject;
    visitBitwiseXorNode(ctx: ParserRuleContext): AttributedObject;
    visitNENode(ctx: ParserRuleContext): AttributedObject;
    visitConditionalNode(ctx: ParserRuleContext): AttributedObject;
    visitModNode(ctx: ParserRuleContext): AttributedObject;
    visitLogicalNotNode(ctx: ParserRuleContext): AttributedObject;
    visitEQNode(ctx: ParserRuleContext): AttributedObject;
    visitBitwiseAndNode(ctx: ParserRuleContext): AttributedObject;
    visitGENode(ctx: ParserRuleContext): AttributedObject;
    visitUnsignedRightShiftNode(ctx: ParserRuleContext): AttributedObject;
    visitAddNode(ctx: ParserRuleContext): AttributedObject;
    visitLTNode(ctx: ParserRuleContext): AttributedObject;
    visitBitwiseNotNode(ctx: ParserRuleContext): AttributedObject;
    visitSubtractNode(ctx: ParserRuleContext): AttributedObject;
    visitGTNode(ctx: ParserRuleContext): AttributedObject;
    abstract visitValueReferenceNode(ctx: ParserRuleContext): AttributedObject;
    visitRegexMatchNode(ctx: ParserRuleContext): AttributedObject;
    visitLiteralExpression(ctx: ParserRuleContext): AttributedObject;
    visitFunctionNode(ctx: ParserRuleContext): AttributedObject;
    visitRightShiftNode(ctx: ParserRuleContext): AttributedObject;
    visitDivNode(ctx: ParserRuleContext): AttributedObject;
    visitLeftShiftNode(ctx: ParserRuleContext): AttributedObject;
    visitExpressionNode(ctx: ParserRuleContext): AttributedObject;
    visitLENode(ctx: ParserRuleContext): AttributedObject;
    visitLogicalOrNode(ctx: ParserRuleContext): AttributedObject;
    visitMulNode(ctx: ParserRuleContext): AttributedObject;
    visitUnaryNode(ctx: ParserRuleContext): AttributedObject;
    visitArguments(ctx: ParserRuleContext): Array<AttributedObject>;
    visitFunctionExpression(ctx: ParserRuleContext): AttributedObject;
    visitValueReference(ctx: ParserRuleContext): AttributedObject;
    visitLongConstNode(ctx: ParserRuleContext): AttributedObject;
    visitFloatConstNode(ctx: ParserRuleContext): AttributedObject;
    visitStringConstNode(ctx: ParserRuleContext): AttributedObject;
    visitTrueNode(ctx: ParserRuleContext): AttributedObject;
    visitFalseNode(ctx: ParserRuleContext): AttributedObject;
    visitNullNode(ctx: ParserRuleContext): AttributedObject;
    visitTerminal(ctx: ParserRuleContext): string;
    private visitBinaryOperators;
    private visitEqualityOperators;
}
