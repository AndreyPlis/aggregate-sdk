import { ParserRuleContext } from "antlr4";
declare const AggregateExpressionVisitor: any;
export default class DumperVisitor extends AggregateExpressionVisitor {
    private indent;
    private result;
    private indentString;
    getResult(): String;
    private dumpNode;
    visitCompilationUnit(ctx: ParserRuleContext): void;
    visitLogicalAndNode(ctx: ParserRuleContext): void;
    visitBitwiseOrNode(ctx: ParserRuleContext): void;
    visitBitwiseXorNode(ctx: ParserRuleContext): void;
    visitNENode(ctx: ParserRuleContext): void;
    visitConditionalNode(ctx: ParserRuleContext): void;
    visitModNode(ctx: ParserRuleContext): void;
    visitLogicalNotNode(ctx: ParserRuleContext): void;
    visitEQNode(ctx: ParserRuleContext): void;
    visitBitwiseAndNode(ctx: ParserRuleContext): void;
    visitGENode(ctx: ParserRuleContext): void;
    visitUnsignedRightShiftNode(ctx: ParserRuleContext): void;
    visitAddNode(ctx: ParserRuleContext): void;
    visitLTNode(ctx: ParserRuleContext): void;
    visitBitwiseNotNode(ctx: ParserRuleContext): void;
    visitSubtractNode(ctx: ParserRuleContext): void;
    visitGTNode(ctx: ParserRuleContext): void;
    visitValueReferenceNode(ctx: ParserRuleContext): void;
    visitRegexMatchNode(ctx: ParserRuleContext): void;
    visitLiteralExpression(ctx: ParserRuleContext): any;
    visitFunctionNode(ctx: ParserRuleContext): void;
    visitRightShiftNode(ctx: ParserRuleContext): void;
    visitDivNode(ctx: ParserRuleContext): void;
    visitLeftShiftNode(ctx: ParserRuleContext): void;
    visitExpressionNode(ctx: ParserRuleContext): void;
    visitLENode(ctx: ParserRuleContext): void;
    visitLogicalOrNode(ctx: ParserRuleContext): void;
    visitMulNode(ctx: ParserRuleContext): void;
    visitUnaryNode(ctx: ParserRuleContext): void;
    visitFunctionExpression(ctx: ParserRuleContext): void;
    visitValueReference(ctx: ParserRuleContext): void;
    visitLongConstNode(ctx: ParserRuleContext): void;
    visitFloatConstNode(ctx: ParserRuleContext): void;
    visitStringConstNode(ctx: ParserRuleContext): void;
    visitTrueNode(ctx: ParserRuleContext): void;
    visitFalseNode(ctx: ParserRuleContext): void;
    visitNullNode(ctx: ParserRuleContext): void;
}
export {};
