import GenericActionCommand from '../GenericActionCommand';
import TableFormat from '../../datatable/TableFormat';
import DashboardsHierarchyInfo from '../../util/DashboardsHierarchyInfo';
import DataTable from '../../datatable/DataTable';
import DashboardProperties from '../../util/DashboardProperties';
import WindowLocation from '../../util/WindowLocation';
export default class LaunchWidget extends GenericActionCommand {
    static readonly CF_DEFAULT_CONTEXT: string;
    static readonly CF_WIDGET_CONTEXT: string;
    static readonly CF_TEMPLATE: string;
    static readonly CF_LOCATION: string;
    static readonly CF_DASHBOARD: string;
    static readonly CF_KEY: string;
    static readonly CF_INPUT: string;
    static readonly CF_DASHBOARDS_HIERARCHY_INFO: string;
    static readonly CF_WIDGET_SETTING: string;
    static readonly CFT_LAUNCH_WIDGET: TableFormat;
    __static_initializer0(): void;
    private widgetContext;
    private defaultContext;
    private template;
    private location;
    private dashboard;
    private key;
    private input;
    private dhInfo;
    private widgetSetting;
    constructor(titleOrFormat?: string | TableFormat, widgetContext?: string, defaultContext?: string, template?: string | null);
    static createLaunchWidgetWithDataTable(title: string, parameters: DataTable): LaunchWidget;
    protected constructParameters(): DataTable;
    getDefaultContext(): string | null;
    setDefaultContext(defaultContext: string): void;
    getWidgetContext(): string | null;
    setWidgetContext(widgetContext: string): void;
    getTemplate(): string | null;
    setTemplate(encodedWidgetTemplate: string): void;
    getLocation(): WindowLocation | null;
    setLocation(location: WindowLocation): void;
    etDashboard(): DashboardProperties | null;
    setDashboard(dashboard: DashboardProperties): void;
    getInput(): DataTable | null;
    setInput(input: DataTable): void;
    getKey(): string | null;
    setKey(key: string): void;
    getDashboardsHierarchyInfo(): DashboardsHierarchyInfo | null;
    setDashboardsHierarchyInfo(dhInfo: DashboardsHierarchyInfo): void;
    getWidgetSetting(): DataTable | null;
    setWidgetSetting(widgetSetting: DataTable): void;
}
