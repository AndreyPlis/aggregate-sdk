import GenericActionCommand from '../GenericActionCommand';
import TableFormat from '../../datatable/TableFormat';
import DataTable from '../../datatable/DataTable';
import WindowLocation from '../../util/WindowLocation';
import DashboardProperties from '../../util/DashboardProperties';
import DashboardsHierarchyInfo from '../../util/DashboardsHierarchyInfo';
import Context from '../../context/Context';
export default class ShowSystemTree extends GenericActionCommand {
    static readonly CF_ROOT: string;
    static readonly CF_ROOTS: string;
    static readonly CF_LOCATION: string;
    static readonly CF_DASHBOARD: string;
    static readonly CF_KEY: string;
    static readonly CF_RELATED_ACTIONS: string;
    static readonly CF_CONTEXT_MENU: string;
    static readonly CF_SHOW_TOOLBAR: string;
    static readonly CF_NODE_CLICK_EXPRESSION: string;
    static readonly CF_NODE_FILTER_EXPRESSION: string;
    static readonly CF_DASHBOARDS_HIERARCHY_INFO: string;
    static readonly CF_ROOTS_ROOT: string;
    static readonly CFT_SHOW_SYSTEM_TREE_ROOTS: TableFormat;
    static readonly CFT_SHOW_SYSTEM_TREE: TableFormat;
    static __static_initializer_0(): void;
    private root;
    private roots;
    private relatedActions;
    private contextMenu;
    private showToolbar;
    private location;
    private dashboard;
    private key;
    private dhInfo;
    private nodeClickExpression;
    private nodeFilterExpression;
    private static _init;
    static initialize(): void;
    constructor(titleOrFormat?: string | TableFormat, roots?: Context<any, any> | Array<string>);
    static createShowSystemTreeWithDataTable(title: string, parameters: DataTable): ShowSystemTree;
    protected constructParameters(): DataTable;
    isRelatedActions(): boolean;
    setRelatedActions(relatedActions: boolean): void;
    isContextMenu(): boolean;
    setContextMenu(contextMenu: boolean): void;
    isShowToolbar(): boolean;
    setShowToolbar(showToolbar: boolean): void;
    getLocation(): WindowLocation | null;
    setLocation(location: WindowLocation): void;
    getDashboard(): DashboardProperties | null;
    setDashboard(dashboard: DashboardProperties): void;
    getKey(): string | null;
    setKey(key: string): void;
    getNodeClickExpression(): string | null;
    setNodeClickExpression(nodeClickExpression: string): void;
    getNodeFilterExpression(): string | null;
    setNodeFilterExpression(nodeFilterExpression: string): void;
    getDashboardsHierarchyInfo(): DashboardsHierarchyInfo | null;
    setDashboardsHierarchyInfo(dhInfo: DashboardsHierarchyInfo): void;
}
