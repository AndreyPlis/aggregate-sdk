import CommandParserListener from './CommandParserListener';
import Command from './Command';
import CommandParser from './CommandParser';
import ReplyMonitor from './ReplyMonitor';
import CommandProcessorStatistics from './CommandProcessorStatistics';
import LoggerAdapter from '../util/logger/LoggerAdapter';
export default abstract class AbstractDeviceController<I extends Command, O extends Command> implements CommandParserListener {
    private readonly logger;
    private readonly commandTimeout;
    private commandParser;
    private processor;
    private connecting;
    private connected;
    private loggingIn;
    private loggedIn;
    private resetTimeoutsOnData;
    constructor(commandTimeout: number, logger: LoggerAdapter);
    connect(): Promise<void>;
    protected checkAndConnect(): Promise<void>;
    login(): Promise<void>;
    disconnect(): void;
    sendCommand(cmd: O): Promise<I | null>;
    isActive(): boolean;
    processAsyncCommand(cmd: Command): void;
    newDataReceived(): void;
    private resetCommandTimeouts;
    protected startCommandProcessor(): void;
    protected abstract connectImpl(): Promise<boolean>;
    protected abstract loginImpl(): Promise<boolean>;
    abstract disconnectImpl(): void;
    abstract send(command: O): void;
    getCommandParser(): CommandParser<I>;
    getCommandTimeout(): number;
    getLogger(): LoggerAdapter;
    setCommandParser(commandParser: CommandParser<I>): void;
    isConnected(): boolean;
    private setConnected;
    private isLoggedIn;
    private setLoggedIn;
    setResetTimeoutsOnData(resetTimeoutWhenDataReceived: boolean): void;
    getActiveCommands(): Array<ReplyMonitor<O, I>>;
    getStatistics(): CommandProcessorStatistics | null;
}
