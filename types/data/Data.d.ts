import StringEncodable from '../util/StringEncodable';
import StringBuilder from '../util/java/StringBuilder';
import ClassicEncodingSettings from '../datatable/encoding/ClassicEncodingSettings';
import ByteBuffer from 'bytebuffer';
import JObject from '../util/java/JObject';
import ContextManager from '../context/ContextManager';
import Context from '../context/Context';
import CallerController from '../context/CallerController';
import Class from '../util/java/Class';
export default class Data extends JObject implements StringEncodable {
    private static readonly TRANSCODER_VERSION;
    static readonly BUFFER_MULTIPLIER: number;
    private static readonly SEPARATOR;
    private id;
    private name;
    private preview;
    private data;
    private shallowCopy;
    private attachments;
    constructor(data?: ByteBuffer | null);
    static fromString(value: string): Data;
    setPreview(preview: ByteBuffer): void;
    setId(id: number): void;
    setData(data: ByteBuffer | null): void;
    setBlob(blob: ByteBuffer): void;
    setName(name: string): void;
    getPreview(): ByteBuffer | null;
    getName(): string | null;
    getId(): number | null;
    getData(): ByteBuffer | null;
    getBlob(): ByteBuffer | null;
    getAttachments(): Map<string, JObject>;
    setAttachments(attachments: Map<string, JObject>): void;
    setShallowCopy(shallowCopy: boolean): void;
    isShallowCopy(): boolean;
    fetchData(cm: ContextManager<Context<any, any>>, cc: CallerController): Promise<ByteBuffer | null>;
    private checksum;
    toDetailedString(): string;
    toString(): string;
    toCleanString(): string;
    clone(): Data;
    equals(obj: JObject | null): boolean;
    getEncodedDataFromEncodingSettings(): string;
    encodeToString(): string;
    encode(sb: StringBuilder, settings: ClassicEncodingSettings | null, isTransferEncode: boolean, encodeLevel: number): StringBuilder;
    private appendBytes;
    releaseData(): void;
    static getClass(): Class;
}
