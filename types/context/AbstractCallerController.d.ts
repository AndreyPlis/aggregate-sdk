import CallerController from './CallerController';
import CallerData from './CallerData';
import Context from './Context';
import PermissionCache from '../security/PermissionCache';
import JObject from '../util/java/JObject';
import Permissions from '../security/Permissions';
export default abstract class AbstractCallerController extends JObject implements CallerController {
    private static readonly CACHE_EXPIRATION_PERIOD;
    private static sessionIDCounter;
    private sessionID;
    private static readonly CONTROLLERS;
    private username;
    private readonly callerData;
    private loggedIn;
    private type;
    private address;
    private readonly creationTime;
    private readonly properties;
    private lastCacheOperationTime;
    private _cache;
    constructor(callerData: CallerData | null);
    toString(): string;
    getPermissions(): Permissions | null;
    isLoggedIn(): boolean;
    isPermissionCheckingEnabled(): boolean;
    getPermissionCache(): PermissionCache | null;
    getCallerData(): CallerData | null;
    getProperties(): Map<string, string>;
    setLoggedIn(loggedIn: boolean): void;
    sendFeedback(level: number, message: string): void;
    getUsername(): string | null;
    setUsername(username: string): void;
    getInheritedUsername(): string | null;
    getEffectiveUsername(): string | null;
    getType(): string | null;
    setType(type: string): void;
    getAddress(): string | null;
    setAddress(address: string): void;
    getCreationTime(): Date;
    login(username: string, inheritedUsername: string, permissions: Permissions): void;
    logout(): void;
    private resetCache;
    getSessionID(): number;
    lookup(path: string): Context<any, any> | null;
    cache(path: string, context: Context<any, any>): void;
    private resetCacheBy;
    abstract isHeadless(): boolean;
}
