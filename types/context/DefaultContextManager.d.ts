import Context from './Context';
import ContextManager from './ContextManager';
import JObject from '../util/java/JObject';
import CallerController from './CallerController';
import EventDispatcher from './EventDispatcher';
import ContextEventListenerSet from '../event/ContextEventListenerSet';
import EventDefinition from './EventDefinition';
import FunctionDefinition from './FunctionDefinition';
import EventData from './EventData';
import FireEventRequestController from '../event/FireEventRequestController';
import VariableDefinition from './VariableDefinition';
import DefaultContextEventListener from './DefaultContextEventListener';
import Event from '../data/Event';
export default class DefaultContextManager<T extends Context<any, any>> extends JObject implements ContextManager<T> {
    private async;
    private rootContext;
    private readonly callerController;
    private eventDispatcher;
    private eventDispatcherOwner;
    private readonly eventListeners;
    private readonly maskListeners;
    private started;
    constructor(async: boolean, eventQueueLength?: number, concurrentDispatcherCount?: number | null, eventDispatcher?: EventDispatcher | null);
    isStarted(): boolean;
    start(): void;
    restart(): void;
    stop(): void;
    getRoot(): T | null;
    setRoot(newRoot: T): void;
    get(contextName: string, caller?: CallerController): Promise<T | null>;
    private addEventListener;
    protected addListenerToContext(con: T, event: string, listener: DefaultContextEventListener, mask: boolean, weak: boolean): void;
    private removeEventListener;
    protected removeListenerFromContext(con: T, event: string, listener: DefaultContextEventListener, mask: boolean): void;
    addMaskEventListener(mask: string, event: string, listener: DefaultContextEventListener, weak?: boolean): Promise<void>;
    removeMaskEventListener(mask: string, event: string, listener: DefaultContextEventListener): Promise<void>;
    protected getListeners(context: string, event: string): ContextEventListenerSet;
    private getContextListeners;
    private getMaskListeners;
    private getContextMaskListeners;
    contextAdded(con: T): void;
    getMaskListenersMasks(): Set<string>;
    addMaskListenerToContext(mask: string, con: T): void;
    contextRemoved(con: T): void;
    contextInfoChanged(con: T): void;
    eventAdded(con: T, ed: EventDefinition): void;
    eventRemoved(con: T, ed: EventDefinition): void;
    functionAdded(con: T, fd: FunctionDefinition): void;
    functionRemoved(con: T, fd: FunctionDefinition): void;
    getCallerController(): CallerController;
    getEventQueueLength(): number;
    getEventQueueStatistics(): Map<string, number>;
    getEventsProcessed(): number;
    getEventsScheduled(): number;
    queue(ed: EventData, ev: Event, request?: FireEventRequestController): void;
    variableAdded(con: T, vd: VariableDefinition): void;
    variableRemoved(con: T, vd: VariableDefinition): void;
    private ensureDispatcher;
    initialize(): void;
}
