import AbstractEntityDefinition from './AbstractEntityDefinition';
import TableFormat from '../datatable/TableFormat';
import Context from './Context';
import CallerController from './CallerController';
import RequestController from './RequestController';
import DataTable from '../datatable/DataTable';
import CompatibilityConverter from './CompatibilityConverter';
import Comparable from '../util/java/Comparable';
import JObject from '../util/java/JObject';
import Permissions from '../security/Permissions';
export default class VariableDefinition extends AbstractEntityDefinition implements Comparable<VariableDefinition> {
    static readonly HISTORY_RATE_CHANGES: number;
    static readonly HISTORY_RATE_ALL: number;
    static readonly CACHING_NONE: number;
    static readonly CACHING_HARD: number;
    static readonly CACHING_SOFT: number;
    private format;
    private readable;
    private writable;
    private hidden;
    private readPermissions;
    private writePermissions;
    private helpId;
    private getter;
    private setter;
    private allowUpdateEvents;
    private changeEventsExpirationPeriod;
    private localCachingMode;
    private remoteCacheTime;
    private valueClass;
    private compatibilityConverters;
    private persistent;
    private defaultValue;
    private historyRate;
    constructor(name: string, format: TableFormat | null, readable: boolean, writable: boolean, description?: string, group?: string);
    private init;
    setFormat(format: TableFormat | null): void;
    setReadable(readable: boolean): void;
    setWritable(writable: boolean): void;
    setHidden(hidden: boolean): void;
    setGroup(group: string): void;
    setReadPermissions(readPermissions: Permissions): void;
    setWritePermissions(writePermissions: Permissions): void;
    setSetter(setter: (con: Context<any, any>, def: VariableDefinition, value: DataTable, caller?: CallerController, request?: RequestController) => boolean): void;
    setGetter(getter: (con: Context<any, any>, def: VariableDefinition, caller?: CallerController, request?: RequestController) => DataTable): void;
    getFormat(): TableFormat | null;
    isReadable(): boolean;
    isWritable(): boolean;
    isHidden(): boolean;
    getReadPermissions(): Permissions | null;
    getWritePermissions(): Permissions | null;
    getSetter(): ((con: Context<any, any>, def: VariableDefinition, value: DataTable, caller?: CallerController, request?: RequestController) => boolean) | null;
    getGetter(): ((con: Context<any, any>, def: VariableDefinition, caller?: CallerController, request?: RequestController) => DataTable) | null;
    getHelpId(): string | null;
    setHelpId(helpId: string): void;
    getValueClass(): any;
    setValueClass(valueClass: any): void;
    getChangeEventsExpirationPeriod(): number;
    /**
     * Sets duration of update events storage (in milliseconds). Null duration disables update events persistent storage.
     * @param {number} changeEventsExpirationPeriod
     */
    setChangeEventsExpirationPeriod(changeEventsExpirationPeriod: number): void;
    isLocalCachingEnabled(): boolean;
    getLocalCachingMode(): number;
    setLocalCachingMode(value: number): void;
    getRemoteCacheTime(): number;
    setRemoteCacheTime(remoteCacheTime: number): void;
    getDefaultValue(): DataTable | null;
    setDefaultValue(defaultValue: DataTable): void;
    isPersistent(): boolean;
    setPersistent(persistent: boolean): void;
    isAllowUpdateEvents(): boolean;
    setAllowUpdateEvents(allowUpdateEvents: boolean): void;
    getHistoryRate(): number;
    setHistoryRate(historyRate: number): void;
    storeChangesOnlyInHistory(): boolean;
    addCompatibilityConverter(converter: CompatibilityConverter): void;
    getCompatibilityConverters(): Array<CompatibilityConverter>;
    getEntityType(): number;
    equals(obj: JObject | null): boolean;
    compareTo(d: VariableDefinition): number;
    clone(): VariableDefinition;
}
