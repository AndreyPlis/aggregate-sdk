import AbstractEntityDefinition from './AbstractEntityDefinition';
import TableFormat from '../datatable/TableFormat';
import Comparable from '../util/java/Comparable';
import Context from './Context';
import CallerController from './CallerController';
import RequestController from './RequestController';
import DataTable from '../datatable/DataTable';
import JObject from '../util/java/JObject';
import Permissions from '../security/Permissions';
export default class FunctionDefinition extends AbstractEntityDefinition implements Comparable<FunctionDefinition> {
    private inputFormat;
    private outputFormat;
    private hidden;
    private permissions;
    private concurrent;
    private implementation;
    constructor(name: string, inputFormat: TableFormat | null, outputFormat: TableFormat | null, description?: string, group?: string);
    private init;
    getInputFormat(): TableFormat | null;
    getOutputFormat(): TableFormat | null;
    isHidden(): boolean;
    getPermissions(): Permissions | null;
    getImplementation(): ((con: Context<any, any>, def: FunctionDefinition, caller: CallerController | null, request: RequestController | null, parameters: DataTable) => DataTable) | null;
    setInputFormat(inputFormat: TableFormat | null): void;
    setOutputFormat(outputFormat: TableFormat | null): void;
    setHidden(hidden: boolean): void;
    setPermissions(permissions: Permissions): void;
    isConcurrent(): boolean;
    setConcurrent(concurrent: boolean): void;
    setImplementation(implementation: (con: Context<any, any>, def: FunctionDefinition, caller: CallerController | null, request: RequestController | null, parameters: DataTable) => DataTable): void;
    compareTo(d: FunctionDefinition): number;
    equals(obj: JObject | null): boolean;
    getEntityType(): number;
}
